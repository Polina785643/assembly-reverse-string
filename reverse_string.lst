     1                                  section .data
     2 00000000 456E74657220796F75-         prompt db "Enter your string: ", 0
     2 00000009 7220737472696E673A-
     2 00000012 2000               
     3                                      prompt_len equ $ - prompt
     4                                      
     5 00000014 52657665727365643A-         result db "Reversed: ", 0
     5 0000001D 2000               
     6                                      result_len equ $ - result
     7                                      
     8 0000001F 0A                          newline db 10
     9                                  
    10                                  section .bss
    11 00000000 <res 100h>                  buffer resb 256          ; буфер для ввода строки
    12 00000100 <res 100h>                  reversed resb 256        ; буфер для развернутой строки
    13                                  
    14                                  section .text
    15                                      global _start
    16                                  
    17                                  _start:
    18                                      ; === ВЫВОД ПРИГЛАШЕНИЯ ДЛЯ ВВОДА ===
    19 00000000 B801000000                  mov rax, 1               ; системный вызов write
    20 00000005 BF01000000                  mov rdi, 1               ; stdout
    21 0000000A 48BE-                       mov rsi, prompt          ; указатель на строку
    21 0000000C [0000000000000000] 
    22 00000014 BA14000000                  mov rdx, prompt_len      ; длина строки
    23 00000019 0F05                        syscall
    24                                  
    25                                      ; === ЧТЕНИЕ СТРОКИ С КЛАВИАТУРЫ ===
    26 0000001B B800000000                  mov rax, 0               ; системный вызов read
    27 00000020 BF00000000                  mov rdi, 0               ; stdin
    28 00000025 48BE-                       mov rsi, buffer          ; буфер для ввода
    28 00000027 [0000000000000000] 
    29 0000002F BA00010000                  mov rdx, 256             ; максимальная длина
    30 00000034 0F05                        syscall
    31                                  
    32                                      ; В rax теперь длина введенной строки (включая \n)
    33 00000036 4989C0                      mov r8, rax              ; сохраняем длину строки
    34 00000039 49FFC8                      dec r8                   ; уменьшаем на 1 (убираем \n)
    35                                  
    36                                      ; === РАЗВОРОТ СТРОКИ ===
    37 0000003C 4C89C1                      mov rcx, r8              ; счетчик = длина строки
    38 0000003F 48BE-                       mov rsi, buffer          ; источник - начало исходной строки
    38 00000041 [0000000000000000] 
    39 00000049 48BF-                       mov rdi, reversed        ; приемник - буфер для развернутой строки
    39 0000004B [0001000000000000] 
    40 00000053 4C01C6                      add rsi, r8              ; перемещаемся в конец исходной строки
    41 00000056 48FFCE                      dec rsi                  ; корректируем позицию (последний символ перед \n)
    42                                  
    43                                  reverse_loop:
    44                                      ; Копируем символ из конца в начало новой строки
    45 00000059 8A06                        mov al, [rsi]            ; берем символ из конца исходной строки
    46 0000005B 8807                        mov [rdi], al            ; записываем в начало новой строки
    47                                      
    48                                      ; Двигаем указатели
    49 0000005D 48FFCE                      dec rsi                  ; двигаемся к началу исходной строки
    50 00000060 48FFC7                      inc rdi                  ; двигаемся к концу новой строки
    51                                      
    52                                      ; Проверяем конец цикла
    53 00000063 E2F4                        loop reverse_loop
    54                                  
    55                                      ; Добавляем символ новой строки в конец развернутой строки
    56 00000065 C6070A                      mov byte [rdi], 10
    57                                  
    58                                      ; === ВЫВОД РЕЗУЛЬТАТА ===
    59                                      ; Сначала выводим "Reversed: "
    60 00000068 B801000000                  mov rax, 1               ; write
    61 0000006D BF01000000                  mov rdi, 1               ; stdout
    62 00000072 48BE-                       mov rsi, result          ; "Reversed: "
    62 00000074 [1400000000000000] 
    63 0000007C BA0B000000                  mov rdx, result_len      ; длина
    64 00000081 0F05                        syscall
    65                                  
    66                                      ; Затем выводим развернутую строку
    67 00000083 B801000000                  mov rax, 1               ; write
    68 00000088 BF01000000                  mov rdi, 1               ; stdout
    69 0000008D 48BE-                       mov rsi, reversed        ; развернутая строка
    69 0000008F [0001000000000000] 
    70 00000097 4C89C2                      mov rdx, r8              ; длина (без \n)
    71 0000009A 0F05                        syscall
    72                                  
    73                                      ; И выводим символ новой строки
    74 0000009C B801000000                  mov rax, 1               ; write
    75 000000A1 BF01000000                  mov rdi, 1               ; stdout
    76 000000A6 48BE-                       mov rsi, newline         ; \n
    76 000000A8 [1F00000000000000] 
    77 000000B0 BA01000000                  mov rdx, 1               ; длина
    78 000000B5 0F05                        syscall
    79                                  
    80                                      ; === ЗАВЕРШЕНИЕ ПРОГРАММЫ ===
    81 000000B7 B83C000000                  mov rax, 60              ; системный вызов exit
    82 000000BC 4831FF                      xor rdi, rdi             ; код возврата 0
    83 000000BF 0F05                        syscall
